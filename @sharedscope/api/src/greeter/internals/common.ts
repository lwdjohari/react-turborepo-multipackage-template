// @generated by protobuf-ts 2.9.3 with parameter generate_dependencies
// @generated from protobuf file "internals/common.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message TimeSpan
 */
export interface TimeSpan {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp start = 1;
     */
    start?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp end = 2;
     */
    end?: Timestamp;
}
/**
 * @generated from protobuf message PageRequest
 */
export interface PageRequest {
    /**
     * @generated from protobuf field: uint64 page = 1;
     */
    page: bigint;
    /**
     * @generated from protobuf field: uint64 page_size = 2;
     */
    pageSize: bigint;
    /**
     * @generated from protobuf field: bool paginate = 3;
     */
    paginate: boolean;
}
/**
 * @generated from protobuf message PageInfo
 */
export interface PageInfo {
    /**
     * @generated from protobuf field: uint64 total_records = 1;
     */
    totalRecords: bigint;
    /**
     * @generated from protobuf field: uint64 total_pages = 2;
     */
    totalPages: bigint;
    /**
     * @generated from protobuf field: uint64 page = 3;
     */
    page: bigint;
    /**
     * @generated from protobuf field: uint64 page_size = 4;
     */
    pageSize: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class TimeSpan$Type extends MessageType<TimeSpan> {
    constructor() {
        super("TimeSpan", [
            { no: 1, name: "start", kind: "message", T: () => Timestamp },
            { no: 2, name: "end", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<TimeSpan>): TimeSpan {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TimeSpan>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TimeSpan): TimeSpan {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp start */ 1:
                    message.start = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.start);
                    break;
                case /* google.protobuf.Timestamp end */ 2:
                    message.end = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.end);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TimeSpan, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp start = 1; */
        if (message.start)
            Timestamp.internalBinaryWrite(message.start, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp end = 2; */
        if (message.end)
            Timestamp.internalBinaryWrite(message.end, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TimeSpan
 */
export const TimeSpan = new TimeSpan$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageRequest$Type extends MessageType<PageRequest> {
    constructor() {
        super("PageRequest", [
            { no: 1, name: "page", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "page_size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "paginate", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PageRequest>): PageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0n;
        message.pageSize = 0n;
        message.paginate = false;
        if (value !== undefined)
            reflectionMergePartial<PageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageRequest): PageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 page */ 1:
                    message.page = reader.uint64().toBigInt();
                    break;
                case /* uint64 page_size */ 2:
                    message.pageSize = reader.uint64().toBigInt();
                    break;
                case /* bool paginate */ 3:
                    message.paginate = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 page = 1; */
        if (message.page !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.page);
        /* uint64 page_size = 2; */
        if (message.pageSize !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.pageSize);
        /* bool paginate = 3; */
        if (message.paginate !== false)
            writer.tag(3, WireType.Varint).bool(message.paginate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageRequest
 */
export const PageRequest = new PageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageInfo$Type extends MessageType<PageInfo> {
    constructor() {
        super("PageInfo", [
            { no: 1, name: "total_records", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "total_pages", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "page", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "page_size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PageInfo>): PageInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalRecords = 0n;
        message.totalPages = 0n;
        message.page = 0n;
        message.pageSize = 0n;
        if (value !== undefined)
            reflectionMergePartial<PageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageInfo): PageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 total_records */ 1:
                    message.totalRecords = reader.uint64().toBigInt();
                    break;
                case /* uint64 total_pages */ 2:
                    message.totalPages = reader.uint64().toBigInt();
                    break;
                case /* uint64 page */ 3:
                    message.page = reader.uint64().toBigInt();
                    break;
                case /* uint64 page_size */ 4:
                    message.pageSize = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 total_records = 1; */
        if (message.totalRecords !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.totalRecords);
        /* uint64 total_pages = 2; */
        if (message.totalPages !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.totalPages);
        /* uint64 page = 3; */
        if (message.page !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.page);
        /* uint64 page_size = 4; */
        if (message.pageSize !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.pageSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PageInfo
 */
export const PageInfo = new PageInfo$Type();
